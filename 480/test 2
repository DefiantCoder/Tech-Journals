function 480Banner() {
    Write-host "Hello SYS480-Devops"
}


Function MENU($conf){

    Clear-Host
    480Banner
    Write-Host "
    Please Select an Option:
    [1] Exit
    [2] Full Clone
    [3] Linked Clone
    [4] Power a VM On/Off
    "
    $selection = Read-Host "Enter an option from above: "

            switch($selection){
                '1' {
                    Clear-Host
                    Exit
                    Break
                }
                '2' {
                    Clear-Host
                    fullClone($conf)
                }
                '3' {
                    Clear-Host
                    linkedClone($conf)
                }
                '4' {
                    Clear-Host
                    powerVM($conf)
                }
                Default {Write-Host "Please select an option 1-4"}

            }
}

# Devin Code ---------------------------------------------
function 480Connect([string] $server){
    $conn = $global:DefaultVIServer
    #are we already connected
    if ($conn){
        $msg = 'Already Connected to: {0}' -f $conn

        Write-Host -ForegroundColor Green $msg
    }
    else{
        $conn = Connect-VIServer -Server $server
        #if this fails, let Connect-VIServer handle the encryption
    }
}

function Get-480Config([string] $config_path){
    Write-Host "Reading " $config_path
    $conf = $null
    if (Test-Path $config_path){
        $conf = (Get-Content -Raw -Path $config_path | ConvertFrom-Json)
        $msg = "Using configuration at {0}" -f $config_path
        Write-Host -ForegroundColor Green $msg
    }
    else{
        Write-Host -ForegroundColor "Yellow" "No Configurtion"
    }
    return $conf
}
# Devin Code end ------------------------------------------------------
function Select-VM([string] $folder){
    $selected_vm=$null
    try{
        $vms = Get-VM -Location $folder
        $index =1
        foreach($vm in $vms){
            Write-Host [$index] $vm.name
            $index+=1
        }
        $pick_index = Read-Host "Which index number [x] do you wish to pick?"
        try {
        $selected_vm = $vms[$pick_index -1]
        Write-Host "You picked " $selected_vm.name

        }
        catch [Exception] {
            $msg = 'That is not a valid input, please select an option provided' -f $index-1
            Write-Host -ForegroundColor "Red" $msg
        }
        #note this is a full on vm object that we can interact with
        return $selected_vm
    }

    catch{
        Write-Host "Invalid Folder: $folder" -ForegroundColor "Red"
    }
}


# Full Clone Milestone 5
function fullClone($config) {
    Write-Host "Base Clone"
    $folder = $config.vmFolder
    $vm = Select-VM -folder $folder

    $vmCloneName = Read-Host "Input your cloned VM's Name: "
    $iflinked = $false


    foreach ($realvm in Get-VM){
        if (“{0}.linked” -f $vm.name -eq $realvm.name){
            Write-Host "Link already exists"
            $iflinked = $true
            $linkedvmName = “{0}.linked” -f $vm.name
            $linkedvm = Get-VM -Name $linkedvmName
            break
        }
        else{
            $linkedClone = “{0}.linked” -f $vm.name 
            # To create new linked clone
            $linkedvm = New-VM -LinkedClone -Name $linkedClone -VM $vm -ReferenceSnapshot $config.snapshot -VMHost $config.esxi_host -Datastore $config.default_datastore
            break
        }

    }


$newClone = New-VM -Name $vmCloneName -VM $linkedvm -VMHost $config.esxi_host -Datastore $config.default_datastore
$newClone | New-Snapshot -Name $config.snapshot

# Deletes the old linked clone when finished
if (!$iflinked){
    $linkedvm | Remove-VM -DeletePermanently -Confirm:$false
}
Start-Sleep -Seconds 4
Menu($config)
}

# Creates Linked Clone
function linkedClone($config){
    Write-Host "Linked Clone"
    $folder = $config.vmFolder
    $vm = Select-VM -folder $folder

    $linkedClone = Read-Host "Enter Name of New Linked Clone:"
    Write-Host "Creating Linked Clone"
    New-VM -LinkedClone -Name $linkedClone -VM $vm -ReferenceSnapshot $config.snapshot -VMHost $config.esxi_host -Datastore $config.default_datastore

    Start-Sleep -Seconds 3
    Menu($config)
}

# Power VM on or off
function powerVM($config){
    Write-Host "Choose your VM"
    $selected_vm=$null
    $vms = Get-VM
    $index = 1


    foreach($vm in $vms){
        Write-Host [$index] $vm.Name
        $index+=1
    }

    $pick_index = Read-Host "Which index number [x] do you wish?"
    try {
        $selected_vm = $vms[$pick_index -1]
    }
    catch [Exception]{
        Write-Host 'Invalid format please select [1-{0}]' -f $index-1
    }

    $power = Read-Host "Would you like to turn that VM 'on' or 'off'?"

    if($power -like 'on'){
        Start-VM -VM $selected_vm -Confirm:$true -RunAsync
    }elseif ($power -like 'off') {
        Stop-VM -VM $selected_vm -Confirm:$true
    }

    Get-VM $selected_vm | Get-NetworkAdapter -Name $adapter_select | Set-NetworkAdapter -NetworkName $network -Confirm:$false

    Menu($config)
}
